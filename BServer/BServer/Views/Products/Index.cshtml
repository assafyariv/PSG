<!-- COPYRIGHT (C) 2011-2013 ASSAF YARIV  !-->

@model IEnumerable<BServer.Models.Products>

@{
    //Layout = null;
    ViewBag.Title = "Index";
    //Model.Count<
}


 @Styles.Render("~/Content/catalog")

 <div class="main"> 
 @foreach (var item in Model)
 {
     string imageurl = "/BServer/" + item.mainPubLocation + "/avothumb.jpg"; 
  <div class="view view-sixth">
      <img src="@Url.Content(imageurl)" width=300 height=200 / >
          <div class="mask">
              <h2> @Html.DisplayFor(modelItem => item.productName)</h2>
              <p>@Html.DisplayFor(modelItem => item.description)</p>
              <a href="@Url.Action("Details", new { id = item.productID })" class="info">VIEW NOW</a>
           </div>
   </div>
}
</div>


@{/*
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		
		<!-- see details at http://paulirish.com/2011/requestanimationframe-for-smart-animating/ -->
    	  <style type ="text/css">
			body {
				font-family: Monospace;
				background-color: #000;
				color: #fff;
				margin: 0px;
				overflow: hidden;
			}
			#info {
				position: absolute;
				top: 10px;
				width: 100%;
				text-align: center;
				z-index: 100;
				display:block;
			}
			#info a { color: #ffff; font-weight: bold; text-decoration: underline; cursor: pointer }
		
   
      </style>
        

	</head>
<body>
 @Scripts.Render("~/bundles/Three")
       @Scripts.Render("~/bundles/ThreeJS")
        @Scripts.Render("~/bundles/Text")
          @Scripts.Render("~/bundles/Threex")
          @Styles.Render("~/Content/themes/base/css", "~/Content/css")
        @Scripts.Render("~/bundles/modernizr")
        <div id="info">
            <div class="content-wrapper">
                <div class="float-left">
                    <p class="site-title"> <a href="@Url.Action("Index", "Home")"><img src="@Url.Content("~/Content/logo3.jpg")"/></a></p>
                </div>
                <div class="float-right">
                    <section id="login">
                        @Html.Partial("_LoginPartial")
                    </section>
                    <nav>
                        <ul id="menu">
                            <li>@Html.ActionLink("Home", "Index", "Home")</li>
                            <li>@Html.ActionLink("About", "About", "Home")</li>
                            <li>@Html.ActionLink("Contact", "Contact", "Home")</li>
                            <li>@Html.ActionLink("Products", "Index", "Products")</li>
                        </ul>
                    </nav>
                </div>
            </div>
  
 <p>
    @Html.ActionLink("Create New", "Create")
</p>

</div>
	<!-- three.js container -->
    	<div id="container"></div>
	

	<script type="text/javascript">

	    if (!Detector.webgl) Detector.addGetWebGLMessage();

	    var SHADOW_MAP_WIDTH = 2048, SHADOW_MAP_HEIGHT = 1024;

	    var MARGIN = 100;

	    var SCREEN_WIDTH = window.innerWidth;
	    var SCREEN_HEIGHT = window.innerHeight// - 2 * MARGIN;
	    var FLOOR = -250;

	    var camera, controls, scene, renderer;
	    var container, stats;

	    var NEAR = 5, FAR = 3000;

	    var sceneHUD, cameraOrtho, hudMaterial;

	    var morph, morphs = [];

	    var light;

	    var clock = new THREE.Clock();



	    init();
	    animate();


	    function init() {

	        container = document.createElement('div');
	        document.body.appendChild(container);

	        // SCENE

	        scene = new THREE.Scene();
	        scene.fog = new THREE.Fog(0xffaa55, 1000, FAR);
	        THREE.ColorUtils.adjustHSV(scene.fog.color, 0.02, -0.15, -0.65);

	        // SCENE CAMERA

	        camera = new THREE.PerspectiveCamera(23, SCREEN_WIDTH / SCREEN_HEIGHT, NEAR, FAR);
	        camera.position.set(700, 50, 1900);
	        scene.add(camera);

	        controls = new THREE.FirstPersonControls(camera);
            //controls = new THREEx.FirstPersonControls(camera)

	        controls.lookSpeed = 0.0125;
	        controls.movementSpeed = 500;
	        controls.noFly = false;
	        controls.lookVertical = true;
	        controls.constrainVertical = true;
	        controls.verticalMin = 1.5;
	        controls.verticalMax = 2.0;

	        controls.lon = -110;

	        // LIGHTS

	        var ambient = new THREE.AmbientLight(0x444444);
	        scene.add(ambient);

	        light = new THREE.SpotLight(0xffffff, 1, 0, Math.PI, 1);
	        light.position.set(0, 1500, 1000);
	        light.target.position.set(0, 0, 0);

	        light.castShadow = true;

	        light.shadowCameraNear = 700;
	        light.shadowCameraFar = camera.far;
	        light.shadowCameraFov = 50;

	        //light.shadowCameraVisible = true;

	        light.shadowBias = 0.0001;
	        light.shadowDarkness = 0.5;

	        light.shadowMapWidth = SHADOW_MAP_WIDTH;
	        light.shadowMapHeight = SHADOW_MAP_HEIGHT;

	        scene.add(light);

	        createHUD();
	        createScene();

	        // RENDERER

	        renderer = new THREE.WebGLRenderer({ clearColor: 0x000000, clearAlpha: 1, antialias: false,  preserveDrawingBuffer: true });
	        renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);
	        renderer.domElement.style.position = "relative";
	        //renderer.domElement.style.top = MARGIN + 'px';
	        container.appendChild(renderer.domElement);

	        renderer.setClearColor(scene.fog.color, 1);
	        renderer.autoClear = false;

	        //

	        renderer.shadowMapEnabled = true;
	        renderer.shadowMapSoft = true;

	        // STATS

	        stats = new Stats();
	        stats.domElement.style.position = 'absolute';
	        stats.domElement.style.top = '0px';
	        stats.domElement.style.zIndex = 100;
	        //container.appendChild( stats.domElement );

	        // create a camera contol
	        cameraControls = new THREEx.DragPanControls(camera)

	        // transparently support window resize
	        THREEx.WindowResize.bind(renderer, camera);
	        // allow 'p' to make screenshot
	        THREEx.Screenshot.bindKey(renderer);
	        // allow 'f' to go fullscreen where this feature is supported
	        if (THREEx.FullScreen.available()) {
	            THREEx.FullScreen.bindKey();
	            //document.getElementById('inlineDoc').innerHTML += "- <i>f</i> for fullscreen";
	        }

	        // here you add your objects
	        // - you will most likely replace this part by your own

	        THREE.Object3D._threexDomEvent.camera(camera);
	    }


	    function createHUD() {

	        cameraOrtho = new THREE.OrthographicCamera(SCREEN_WIDTH / -2, SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2, SCREEN_HEIGHT / -2, -10, 1000);
	        cameraOrtho.position.z = 10;

	        var shader = THREE.ShaderExtras["unpackDepthRGBA"];
	        var uniforms = new THREE.UniformsUtils.clone(shader.uniforms);

	        hudMaterial = new THREE.ShaderMaterial({ vertexShader: shader.vertexShader, fragmentShader: shader.fragmentShader, uniforms: uniforms });

	        var hudGeo = new THREE.PlaneGeometry(SHADOW_MAP_WIDTH / 2, SHADOW_MAP_HEIGHT / 2);
	        var hudMesh = new THREE.Mesh(hudGeo, hudMaterial);
	        hudMesh.position.x = (SCREEN_WIDTH - SHADOW_MAP_WIDTH / 2) * -0.5;
	        hudMesh.position.y = (SCREEN_HEIGHT - SHADOW_MAP_HEIGHT / 2) * -0.5;
	        hudMesh.rotation.x = Math.PI / 2;

	        sceneHUD = new THREE.Scene();
	        sceneHUD.add(hudMesh);

	        cameraOrtho.lookAt(sceneHUD.position);

	    }

	    function createScene() {

	        // GROUND

	        var geometry = new THREE.PlaneGeometry(100, 100);
	        var planeMaterial = new THREE.MeshPhongMaterial({ color: 0xffdd99 });
	        THREE.ColorUtils.adjustHSV(planeMaterial.color, 0, 0, 0.9);
	        planeMaterial.ambient = planeMaterial.color;

	        var ground = new THREE.Mesh(geometry, planeMaterial);

	        ground.position.set(0, FLOOR, 0);
	        ground.scale.set(100, 100, 100);

	        ground.castShadow = false;
	        ground.receiveShadow = true;

	        scene.add(ground);

	        // TEXT

	        var textGeo = new THREE.TextGeometry("Products:", {

	            size: 50,
	            height: 30,
	            curveSegments: 4,

	            font: "helvetiker",
	            weight: "bold",
	            style: "normal",

	            bevelThickness: 2,
	            bevelSize: 5,
	            bevelEnabled: true

	        });

	        textGeo.computeBoundingBox();
	        var centerOffset = -0.5 * (textGeo.boundingBox.max.x - textGeo.boundingBox.min.x);

	        var textMaterial = new THREE.MeshPhongMaterial({ color: 0xff0000, specular: 0xffffff, ambient: 0xaa0000 });

	        var mesh = new THREE.Mesh(textGeo, textMaterial);
	        mesh.position.x = centerOffset;
	        mesh.position.y = FLOOR + 167;

	        mesh.castShadow = true;
	        mesh.receiveShadow = true;

	        scene.add(mesh);

	        // CUBES

	       /* var mesh = new THREE.Mesh(new THREE.CubeGeometry(1500, 220, 150), planeMaterial);

	        mesh.position.y = FLOOR - 50;
	        mesh.position.z = 20;

	        mesh.castShadow = true;
	        mesh.receiveShadow = true;

	        scene.add(mesh);

	        var mesh = new THREE.Mesh(new THREE.CubeGeometry(1600, 170, 250), planeMaterial);

	        mesh.position.y = FLOOR - 50;
	        mesh.position.z = 20;

	        mesh.castShadow = true;
	        mesh.receiveShadow = true;

	        scene.add(mesh);
            */
	        // MORPHS

	    /*    function addMorph(geometry, speed, duration, x, y, z, fudgeColor) {

	            var material = new THREE.MeshLambertMaterial({ color: 0xffaa55, morphTargets: true, vertexColors: THREE.FaceColors });

	            //geometry.materials[ 0 ] = material;

	            if (fudgeColor) {

	                THREE.ColorUtils.adjustHSV(material.color, 0, 0.5 - Math.random(), 0.5 - Math.random());
	                material.ambient = material.color;

	            }

	            var meshAnim = new THREE.MorphAnimMesh(geometry, material);

	            meshAnim.speed = speed;
	            meshAnim.duration = duration;
	            meshAnim.time = 600 * Math.random();

	            meshAnim.position.set(x, y, z);
	            meshAnim.rotation.y = Math.PI / 2;

	            meshAnim.castShadow = true;
	            meshAnim.receiveShadow = true;

	            scene.add(meshAnim);

	            morphs.push(meshAnim);

	        }

	        function morphColorsToFaceColors(geometry) {

	            if (geometry.morphColors && geometry.morphColors.length) {

	                var colorMap = geometry.morphColors[0];

	                for (var i = 0; i < colorMap.colors.length; i++) {

	                    geometry.faces[i].color = colorMap.colors[i];

	                }

	            }

	        }

	        var loader = new THREE.JSONLoader();
            var indeX = -1000;
            var indexY = 200;
            @foreach(var item in Model)
            {
               <text>
               @{string modelPath = "/BServer/" + item.location + "/modeltop.js";}

	          loader.load('@modelPath', function (geometry) {
	            var mesh = new THREE.Mesh(geometry, new THREE.MeshFaceMaterial());
	            mesh.position.set(indeX, FLOOR + 200, 300);
                indeX = indeX + 500; //TODO /number of models /size
	            scene.add(mesh);
                var bound = 100/mesh.boundRadius
	            mesh.scale.set(40, 40, 40);
               //mesh.scale.x *=bound;
               //mesh.scale.y *=bound;
               //mesh.scale.z *=bound;
	            // mesh.position.z = 300;
	            mesh.rotation.y = Math.PI / 4;
	            mesh.castShadow = true;
	            mesh.receiveShadow = true;
                mesh.name = @item.productID;
	            mesh.on('dblclick' , function (event){
                      mesh = event.target;
                      var url = 'Products/Details/' + mesh.name; 
                      window.location = url; } );
	            }); 
                </text>
            } //foreach
	    }
    

	    function animate() {

	        requestAnimationFrame(animate);

	        render();
	        stats.update();

	    }

	    function render() {

	        var delta = clock.getDelta();

	        for (var i = 0; i < morphs.length; i++) {

	            morph = morphs[i];

	            //	morph.updateAnimation( 1000 * delta );

	            morph.position.x += morph.speed * delta;

	            if (morph.position.x > 2000) {

	                morph.position.x = -1000 - Math.random() * 500;

	            }

	        }

	        controls.update(delta);

	        renderer.clear();
	        renderer.render(scene, camera);

	        // Render debug HUD with shadow map

	        //hudMaterial.uniforms.tDiffuse.texture = light.shadowMap;
	        //renderer.render( sceneHUD, cameraOrtho );

	    }

			</script>
</body>


*/
}


@{ /*  TODO pass this to be the publication list in the details page
 @Styles.Render("~/bundles/catalog")
 <div class="main"> 
 @foreach (var item in Model)
 {
   string imageurl = item.location + "/thumb.png"; 
  <div class="view view-sixth">
                    <img src="@Url.Content("{imageurl}")" width=300 height=200 / >
                    <div class="mask">
                        <h2> @Html.DisplayFor(modelItem => item.productName)</h2>
                        <p>@Html.DisplayFor(modelItem => item.description)</p>
                        <a href="@Url.Action("Details", new { id = item.productID })" class="info">VIEW NOW</a>
                    </div>
                </div>
         }
          </div>

   */ }

          @{  
           // @Html.ActionLink("Edit", "Edit", new { id=item.productID }) |
           // @Html.ActionLink("Details", "Details", new { id=item.productID }) |
           // @Html.ActionLink("Delete", "Delete", new { id=item.productID })

            }