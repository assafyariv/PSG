/******************************************************************************
 * Copyright 1986-2008 by mental images GmbH, Fasanenstr. 81, D-10623 Berlin,
 * Germany. All rights reserved.
 *****************************************************************************/

shader Texture_lookup_1d
{
  input:
    Texture1d texture = "default.dds"
    {
		description( "The texture from which colors will be sampled." );
    };    
    int texture_space = 0 
    { 
		literal();
		description( "Texture coordinates to use when sampling the "
		             "input texture." );
		hard_range(0, 3);
	};
	float texture_u
    {
		default_to_state("texture_coordinate", "texture_space");
    };
    
  output:
    Color result;
    
    void main()
    {
		result = tex1d(texture, texture_u);
    }
};

shader Texture_lookup_2d
{
  input:
    Texture2d texture = "default.dds"
    {
		description( "The texture from which colors will be sampled." );
    };    
    int texture_space = 0 
    { 
		literal(); 
		description( "Texture coordinates to use when sampling the "
		             "input texture." );		
		hard_range(0, 3);
    };
    float2 texture_uv 
    {
		default_to_state("texture_coordinate", "texture_space");
    };
    
  output:
    Color result;
    
    void main()
    {	
		result = tex2d(texture, texture_uv);
    }
};

shader Texture_lookup_3d
{
  input:
    Texture3d texture = "default.dds"
    {
		description( "The exture from which colors will be sampled." );
    };    
    int texture_space = 0 
    { 
		literal(); 
		description( "Texture coordinates to use when sampling the "
		             "input texture." );
		hard_range(0, 3);
	};
	float3 texture_uvw
    {
		default_to_state("texture_coordinate", "texture_space");
    };
    
  output:
    Color result;
    
    void main()
    {	
		result = tex3d(texture, texture_uvw);
    }
};

shader Texture_lookup_cube
{
  input:
    Texture_cube texture = "default_reflection.dds"
    {
		description( "The texture from which colors will be sampled." );
    };    
    int texture_space = 0 
    { 
		literal(); 
		description( "Texture coordinates to use when sampling the "
		             "input texture." );
		hard_range(0, 3);
	};
	float3 texture_uvw
    {
		default_to_state("texture_coordinate", "texture_space");
    };
    
  output:
    Color result;
    
    void main()
    {	
		result = texcube(texture, texture_uvw);
    }
};
