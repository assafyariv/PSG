/*********************************************************************NVMH3****
*******************************************************************************
$Revision: #3 $

Copyright NVIDIA Corporation 2008
TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED
*AS IS* AND NVIDIA AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO EVENT SHALL NVIDIA OR ITS SUPPLIERS
BE LIABLE FOR ANY SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES
WHATSOEVER (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS,
BUSINESS INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER PECUNIARY
LOSS) ARISING OUT OF THE USE OF OR INABILITY TO USE THIS SOFTWARE, EVEN IF
NVIDIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

% Simple color correction controls using a color matrix,
% as seen in the NVIDIA "Toys" demo. Controls are much like 
% those on your TV: Brightness, Contrast, etc.
% See http://www.sgi.com/grafica/matrix/

keywords: image_processing



To learn more about shading, shaders, and to bounce ideas off other shader
    authors and users, visit the NVIDIA Shader Library Forums at:

    http://developer.nvidia.com/forums/

*******************************************************************************
******************************************************************************/

/*****************************************************************/
/*** HOST APPLICATION IDENTIFIERS ********************************/
/*** Potentially predefined by varying host environments *********/
/*****************************************************************/

// #define _XSI_		/* predefined when running in XSI */

#ifndef FXCOMPOSER_VERSION	/* for very old versions */
#define FXCOMPOSER_VERSION 180
#endif /* FXCOMPOSER_VERSION */

// #define FLIP_TEXTURE_Y	/* Different in OpenGL & DirectX */

/*****************************************************************/
/*** EFFECT-SPECIFIC CODE BEGINS HERE ****************************/
/*****************************************************************/

//
// Note use of gGlobal values in shader code
//

#include "include/Quad.cgh"
#include "include/vnoise-table.cgh"

///////////////////////////////////////////////////////////
/////////////////////////////////////// Tweakables ////////
///////////////////////////////////////////////////////////
float4x4  gProjection;
float gViewDirX;
float gViewDirY;
float gViewDirZ;

float gBrightness <
    string UIWidget = "slider";
    float UIMin = 0.0f;
    float UIMax = 5.0f;
    float UIStep = 0.01f;
> = 1.0f;

float gContrast <
    string UIWidget = "slider";
    float UIMin = -5.0f;
    float UIMax = 5.0f;
    float UIStep = 0.01f;
> = 1.0f;

float gSaturation <
    string UIWidget = "slider";
    float UIMin = -5.0f;
    float UIMax = 5.0f;
    float UIStep = 0.01f;
> = 1.0f;

float gHue <
    string UIWidget = "slider";
    float UIMin = 0.0f;
    float UIMax = 360.0f;
    float UIStep = 1.0f;
> = 0.0f;

float gNoiseLevel <
    string UIWidget = "slider";
    float UIMin = 0.0f;
    float UIMax = 360.0f;
    float UIStep = 1.0f;
> = 0.0f;

float gSoftLevel <
    string UIWidget = "slider";
    float UIMin = 0.0f;
    float UIMax = 360.0f;
    float UIStep = 1.0f;
> = 0.0f;

float gGamma <
    string UIWidget = "slider";
    float UIMin = 0.0f;
    float UIMax = 3.0f;
    float UIStep = 1.0f;
> = 1.0f;

float gTexScale <
    string UIWidget = "slider";
    float UIMin = 0.0f;
    float UIMax = 2.0f;
    float UIStep = 1.0f;
> = 1.0f;

float gToneMap <
    string UIWidget = "slider";
    float UIMin = 0.0f;
    float UIMax = 1.0f;
    float UIStep = 1.0f;
> = 1.0f;

float gDOFPlane <
    string UIWidget = "slider";
    float UIMin = 0.0f;
    float UIMax = 1.0f;
    float UIStep = 1.0f;
> = 0.5f;
float gAOStrength <
    string UIWidget = "slider";
    float UIMin = 0.0f;
    float UIMax = 10.0f;
    float UIStep = 1.0f;
> = 0.0f;
///////////// noisefunctions 

// this is the smoothstep function f(t) = 3t^2 - 2t^3, without the normalization
float3 s_curve(float3 t) { return t*t*( float3(3,3,3) - float3(2,2,2)*t); }
float2 s_curve(float2 t) { return t*t*( float2(3,3) - float2(2,2)*t); }
float  s_curve(float  t) { return t*t*(3.0-2.0*t); }
float erff (float x)
{

///  return p*x + a1;
// ERF function approx. from Wiki
 float p = 0.3275911;
 float a1 = 0.254829592;
 float a2 = -0.284496736;
 float a3 = 1.421413741;
 float a4 = -1.453152027;
 float a5 = 1.061405429;
 float t = 1.0 / (1.0 + p*x);
 float erf = a1*t + a2*pow(t,2.0) + a3*pow(t,3.0) + a4*pow(t,4.0) + a5*pow(t,5.0);
 erf = (1.0 - erf * pow (2.7,-x*x));
 erf = (erf +1.0) / 2.0;
 return  erf;
}

// 3D version
float noise(float3 v, const uniform float4 pg[FULLSIZE])
{
    v = v + (10000.0f).xxx;   // hack to avoid negative numbers

    float3 i = frac(v * NOISEFRAC) * BSIZE;   // index between 0 and BSIZE-1
    float3 f = frac(v);            // fractional position

    // lookup in permutation table
    float2 p;
    p.x = pg[ i[0]     ].w;
    p.y = pg[ i[0] + 1 ].w;
    p = p + i[1];

    float4 b;
    b.x = pg[ p[0] ].w;
    b.y = pg[ p[1] ].w;
    b.z = pg[ p[0] + 1 ].w;
    b.w = pg[ p[1] + 1 ].w;
    b = b + i[2];

    // compute dot products between gradients and vectors
    float4 r;
    r[0] = dot( pg[ b[0] ].xyz, f );
    r[1] = dot( pg[ b[1] ].xyz, f - float3(1.0f, 0.0f, 0.0f) );
    r[2] = dot( pg[ b[2] ].xyz, f - float3(0.0f, 1.0f, 0.0f) );
    r[3] = dot( pg[ b[3] ].xyz, f - float3(1.0f, 1.0f, 0.0f) );

    float4 r1;
    r1[0] = dot( pg[ b[0] + 1 ].xyz, f - float3(0.0f, 0.0f, 1.0f) );
    r1[1] = dot( pg[ b[1] + 1 ].xyz, f - float3(1.0f, 0.0f, 1.0f) );
    r1[2] = dot( pg[ b[2] + 1 ].xyz, f - float3(0.0f, 1.0f, 1.0f) );
    r1[3] = dot( pg[ b[3] + 1 ].xyz, f - float3(1.0f, 1.0f, 1.0f) );

    // interpolate
    f = s_curve(f);
    r = lerp( r, r1, f[2] );
    r = lerp( r.xyyy, r.zwww, f[1] );
    return lerp( r.x, r.y, f[0] );
}

// 2D version
float noise(float2 v, const uniform float4 pg[FULLSIZE])
{
    v = v + (10000.0f).xx;

    float2 i = frac(v * NOISEFRAC) * BSIZE;   // index between 0 and BSIZE-1
    float2 f = frac(v);            // fractional position

    // lookup in permutation table
    float2 p;
    p[0] = pg[ i[0]   ].w;
    p[1] = pg[ i[0]+1 ].w;
    p = p + i[1];

    // compute dot products between gradients and vectors
    float4 r;
    r[0] = dot( pg[ p[0] ].xy,   f);
    r[1] = dot( pg[ p[1] ].xy,   f - float2(1.0f, 0.0f) );
    r[2] = dot( pg[ p[0]+1 ].xy, f - float2(0.0f, 1.0f) );
    r[3] = dot( pg[ p[1]+1 ].xy, f - float2(1.0f, 1.0f) );

    // interpolate
    f = s_curve(f);
    r = lerp( r.xyyy, r.zwww, f[1] );
    return lerp( r.x, r.y, f[0] );
}

// 1D version
float noise(float v, const uniform float4 pg[FULLSIZE])
{
    v = v + 10000.0f;

    float i = frac(v * NOISEFRAC) * BSIZE;   // index between 0 and BSIZE-1
    float f = frac(v);            // fractional position

    // compute dot products between gradients and vectors
    float2 r;
    r[0] = pg[i].x * f;
    r[1] = pg[i + 1].x * (f - 1.0f);

    // interpolate
    f = s_curve(f);
    return lerp( r[0], r[1], f);
}


///////////////////////////////////////////////////////////
/////////////////////////////////////// Textures //////////
///////////////////////////////////////////////////////////

//DECLARE_QUAD_TEX(gSceneTexture,gNormSampler,"A8R8G8B8")
//DECLARE_QUAD_DEPTH_BUFFER(gDepthBuffer,"D24S8")
samplerRECT gNormSampler : RT0_COLOR_ATTACHMENT0 = sampler_state { MagFilter = Nearest; MinFilter = Nearest; };
samplerRECT gNormalSampler : RT0_COLOR_ATTACHMENT1 = sampler_state { MagFilter = Nearest; MinFilter = Nearest; };
samplerRECT gDepthSampler : RT0_COLOR_ATTACHMENT2 = sampler_state { MagFilter = Nearest; MinFilter = Nearest; };
samplerRECT gOccMapSampler : RT0_COLOR_ATTACHMENT3 = sampler_state { MagFilter = Nearest; MinFilter = Nearest; };

///////////////////////////////////////////////////////////
/////////////////////////////////// data structures ///////
///////////////////////////////////////////////////////////

struct ccVertexOut
{
    float4 Position      : POSITION;
    float2 TexCoord0     : TEXCOORD0;
    float4x4 colorMatrix : TEXCOORD1;
};

///////////////////////////////////////////////////////////
////////////////////////////////// vertex shader //////////
///////////////////////////////////////////////////////////

// misc utility functions.....

float4x4 scaleMat(float s)
{
    return float4x4(
	s, 0, 0, 0,
	0, s, 0, 0,
	0, 0, s, 0,
	0, 0, 0, 1);
}

float4x4 translateMat(float3 t)
{
    return float4x4(
	1, 0, 0, 0,
	0, 1, 0, 0,
	0, 0, 1, 0,
	t, 1);
}

float4x4 rotateMat(float3 d, float ang)
{
    float s = sin(ang);
    float c = cos(ang);
    d = normalize(d);
    return float4x4(
	d.x*d.x*(1 - c) + c,
	    d.x*d.y*(1 - c) - d.z*s,
		d.x*d.z*(1 - c) + d.y*s,
		    0,
	d.x*d.y*(1 - c) + d.z*s,
	    d.y*d.y*(1 - c) + c,
		d.y*d.z*(1 - c) - d.x*s,
		    0, 
	d.x*d.z*(1 - c) - d.y*s,
	    d.y*d.z*(1 - c) + d.x*s,
		d.z*d.z*(1 - c) + c,
		    0, 
	0, 0, 0, 1 );
}

float4x4 build_contrast_mat() {
    float4x4 c = translateMat(-0.5);
    c = mul(scaleMat(gContrast) ,c);
    c = mul(translateMat(0.5) ,c);
    return c;
}

const float rwgt = 0.3086;
const float gwgt = 0.6094;
const float bwgt = 0.0820;

float4x4 build_saturation_mat()
{
    // saturation
    // weights to convert linear RGB values to luminance
    float s = gSaturation;
    float4x4 satMat = float4x4(
	(1.0-s)*rwgt + s,
	    (1.0-s)*rwgt,   
		(1.0-s)*rwgt,	
		    0,
	(1.0-s)*gwgt, 	
	    (1.0-s)*gwgt + s, 
		(1.0-s)*gwgt,	
		    0,
	(1.0-s)*bwgt,    
	    (1.0-s)*bwgt,  	
		(1.0-s)*bwgt + s,
		    0,
	0.0, 0.0, 0.0, 1.0);
    return satMat;
}

float4x4 build_hue_mat()
{
    // hue - rotate around (1, 1, 1)
    float4x4 hueMatrix = rotateMat(float3(1, 1, 1), radians(gHue));
    return hueMatrix;
}

float4x4 composite_mat(float4x4 bMat,float4x4 cMat,float4x4 sMat,float4x4 hMat)
{
    float4x4 m;
    m = bMat;
    m = mul(cMat,m);
    m = mul(sMat,m);
    m = mul(hMat,m);
    return m;
}

////////////////////
// vert shader ///////
//////////////////////

ccVertexOut colorControlsVS(
	float4 Position : POSITION, 
	float2 TexCoord : TEXCOORD1)
{
    ccVertexOut OUT = (ccVertexOut)0;
    OUT.Position = Position;
    OUT.TexCoord0.xy = TexCoord * gTexScale;

    // construct color matrices
    float4x4 brightnessMatrix = scaleMat(gBrightness);
    float4x4 contrastMatrix = build_contrast_mat();
    float4x4 saturationMatrix = build_saturation_mat();
    float4x4 hueMatrix = build_hue_mat();
    float4x4 colorMat = composite_mat(brightnessMatrix,
	    contrastMatrix,
	    saturationMatrix,
	    hueMatrix);
    OUT.colorMatrix = colorMat;
//    OUT.TexCoord0.z = 0;
  //  OUT.noise = float2 ( (noise  ( float3(TexCoord.xyz) ,NTab) + 1.0) * 0.5 , 0);
   
    return OUT;
}

/////////////////////////////////////////////////////
////////////////////////////////// pixel shader /////
/////////////////////////////////////////////////////

QUAD_REAL4 colorControlsPS(ccVertexOut IN,
	    uniform samplerRECT SceneSampler,
	    uniform samplerRECT DeepSampler, 
	    uniform samplerRECT NormSampler
) : COLOR
{   
    QUAD_REAL4 scnColor = texRECT(SceneSampler, IN.TexCoord0.xy);
   
    QUAD_REAL4 DepthColor = texRECT(DeepSampler, IN.TexCoord0.xy / 2);
    QUAD_REAL4 NormColor = texRECT(NormSampler, IN.TexCoord0.xy /( 2 * gTexScale));

    float blurRadius = gSoftLevel * 3 * gTexScale;//* pow (DepthColor.r,0.2);
    if (DepthColor.r < gDOFPlane)
     blurRadius = 0.0;
    float2 tcup = float2(IN.TexCoord0.xy) + float2 (-blurRadius,0.0);
    float2 tdown = float2(IN.TexCoord0.xy) + float2 (blurRadius,0.0);
    float2 tleft = float2(IN.TexCoord0.xy) + float2 (0.0,blurRadius);
    float2 tright = float2(IN.TexCoord0.xy) + float2 (0.0,blurRadius);

    QUAD_REAL4 scnColorUP = texRECT(SceneSampler, tcup);
    QUAD_REAL4 scnColorDOWN = texRECT(SceneSampler, tdown);
    QUAD_REAL4 scnColorLEFT = texRECT(SceneSampler, tleft);
    QUAD_REAL4 scnColorRIGHT = texRECT(SceneSampler, tright);

    scnColor = scnColor * 0.2 + scnColorUP * 0.2 + scnColorDOWN *0.2 + scnColorLEFT * 0.2 + scnColorRIGHT  * 0.2;

    QUAD_REAL4 rgbOnly = QUAD_REAL4(scnColor.rgb,1);
    QUAD_REAL4 c;
    // this compiles to 3 dot products:
    //return float4(NormColor.rgb,1.0);
    float occlud = NormColor.r;//lerp (NormColor.r,1.0,(gAOStrength/5.0));
    c.rgb = mul((QUAD_REAL4x4) IN.colorMatrix,rgbOnly * occlud).rgb;
    float i =  ( noise  ( float3(IN.TexCoord0.xy * 0.3, c.r) ,NTab) + 1.0 )  * 0.25;

    c.rgb = c.rgb + i * gNoiseLevel ;//* ii;
    
//return float4(NormColor.rgb,1.0);
     // Simple Tone mapping
//     c.rgb = (c.rgb) / (c.rgb + 1);

	if (gGamma != 1.0)
       {
        c.rgb = pow (c.rgb, gGamma);
       }

       if (gToneMap > 0.0)
       {
       		
          float3 x = c.rgb;//*16;// max(0,c.rgb-0.004);

//John hable
//           c.rgb = (x*(6.2*x+.5))/(x*(6.2*x+1.7)+0.06);
// Some guy from the net
//             c.rgb = (x*(10.0*x+.3))/(x*(10.0*x+0.5)+1.5);
// Reinhard
//           c.r  = c.r / ( 1.0 + c.r);
//           c.g  = c.g / ( 1.0 + c.g);
//           c.b  = c.b / ( 1.0 + c.b);
// s curve
// c = s_curve (c);

// nice exponential 
//c.r = 1-pow(2.0, -4*c.r);
//c.g = 1-pow(2.0, -4*c.g);
//c.b = 1-pow(2.0, -4*c.b);

// ERF on Luminance.
float Lum = 0.2126 * x.r + 0.7152 * x.g + 0.0722 * x.b;
float nL = erff ( Lum * 6.0 - 3.0);
float scale = nL/Lum;
x.rgb = scale * x;
c.rgb = lerp (c.rgb,x.rgb,gToneMap);
// ERF on RGB
//c.r = erff (x.r*6.0 - 3.0);
//c.g = erff (x.g*6.0 - 3.0);
//c.b = erff (x.b*6.0 - 3.0);

 //c.rgb = pow (c.rgb, 2.2);            
          
       }
    c.a = 1.0;//scnColor.a;
    return c;
}  


QUAD_REAL4 colorControlsPS2Blur(ccVertexOut IN,
	    uniform samplerRECT SceneSampler,
	    uniform samplerRECT DeepSampler, 
	    uniform samplerRECT NormSampler
) : COLOR
{   
    QUAD_REAL4 scnColor = texRECT(NormSampler, IN.TexCoord0.xy / gTexScale);
   
    QUAD_REAL4 DepthColor = texRECT(DeepSampler, IN.TexCoord0.xy);
    QUAD_REAL4 NormColor = texRECT(NormSampler, IN.TexCoord0.xy);

//    return float4(scnColor.rgb,1.0);
    float blurRadius = 9 ;//* gTexScale;//* pow (DepthColor.r,0.2);
    int blurCount = 1;
float4 blurColor = float4(0);
while (blurRadius > 1)
{
    float pixx= 1.0/1.0;
    blurCount += 4;
    float2 tcup = float2(IN.TexCoord0.xy) + float2 (-blurRadius * pixx,0.0);
    float2 tdown = float2(IN.TexCoord0.xy) + float2 (blurRadius * pixx,0.0);
    float2 tleft = float2(IN.TexCoord0.xy) + float2 (0.0,blurRadius * pixx);
    float2 tright = float2(IN.TexCoord0.xy) + float2 (0.0,-blurRadius * pixx);

    QUAD_REAL4 scnColorUP = texRECT(NormSampler, tcup  / gTexScale);
    QUAD_REAL4 scnColorDOWN = texRECT(NormSampler, tdown  / gTexScale);
    QUAD_REAL4 scnColorLEFT = texRECT(NormSampler, tleft  / gTexScale);
    QUAD_REAL4 scnColorRIGHT = texRECT(NormSampler, tright  / gTexScale);

    blurColor +=  (scnColorUP+ scnColorDOWN+ scnColorLEFT + scnColorRIGHT);


    blurCount += 4;
    tcup = float2(IN.TexCoord0.xy) + float2 (-blurRadius * pixx,blurRadius * pixx);
    tdown = float2(IN.TexCoord0.xy) + float2 (blurRadius * pixx,blurRadius * pixx);
    tleft = float2(IN.TexCoord0.xy) + float2 (-blurRadius * pixx,-blurRadius * pixx);
    tright = float2(IN.TexCoord0.xy) + float2 (blurRadius * pixx,-blurRadius * pixx);

    scnColorUP = texRECT(NormSampler, tcup / gTexScale);
    scnColorDOWN = texRECT(NormSampler, tdown / gTexScale);
    scnColorLEFT = texRECT(NormSampler, tleft / gTexScale);
    scnColorRIGHT = texRECT(NormSampler, tright / gTexScale);

    blurColor +=  (scnColorUP+ scnColorDOWN+ scnColorLEFT + scnColorRIGHT);


    blurRadius  = blurRadius - 1;
}
blurColor = (scnColor + blurColor) * (1.0/blurCount);

return float4(blurColor.rgb,1.0);
}  


QUAD_REAL4 occmapControlsPS(ccVertexOut IN,
	    uniform samplerRECT SceneSampler,
	    uniform samplerRECT DeepSampler, 
	    uniform samplerRECT NormSampler
) : COLOR
{   
    QUAD_REAL4 scnColor = texRECT(SceneSampler, IN.TexCoord0.xy);
   
    QUAD_REAL4 DepthColor = texRECT(DeepSampler, IN.TexCoord0.xy);
    QUAD_REAL4 NormColor = texRECT(NormSampler, IN.TexCoord0.xy);

//return scnColor;
    QUAD_REAL4 rgbOnly = QUAD_REAL4(scnColor.rgb,1);
    QUAD_REAL4 c;
   
// AO START
    float4 samples[16] =
    {
        float4(0.355512,    -0.709318,  -0.102371,  0.0 ),
        float4(0.534186,    0.71511,    -0.115167,  0.0 ),
        float4(-0.87866,    0.157139,   -0.115167,  0.0 ),
        float4(0.140679,    -0.475516,  -0.0639818, 0.0 ),
        float4(-0.0796121,  0.158842,   -0.677075,  0.0 ),
        float4(-0.0759516,  -0.101676,  -0.483625,  0.0 ),
        float4(0.12493,     -0.0223423, -0.483625,  0.0 ),
        float4(-0.0720074,  0.243395,   -0.967251,  0.0 ),
        float4(-0.207641,   0.414286,   0.187755,   0.0 ),
        float4(-0.277332,   -0.371262,  0.187755,   0.0 ),
        float4(0.63864,     -0.114214,  0.262857,   0.0 ),
        float4(-0.184051,   0.622119,   0.262857,   0.0 ),
            float4(0.110007,    -0.219486,  0.435574,   0.0 ),
        float4(0.235085,    0.314707,   0.696918,   0.0 ),
        float4(-0.290012,   0.0518654,  0.522688,   0.0 ),
        float4(0.0975089,   -0.329594,  0.609803,   0.0 )
    };

    float sampleRadius = gAOStrength * 6 ;//1.0f;
    float distanceScale = 100*gAOStrength ;//1.0f;
    float finalColor = 0.0f;
    float3 se = float3(gViewDirX,gViewDirY,gViewDirZ) *  (DepthColor.r);
    float3 normal = normalize (NormColor.xyz);
    for (int i = 0; i < 16; i++)
    {
        float3 randnor = float3(noise(normal.x,NTab),noise(normal.y,NTab),noise(normal.z,NTab));
        normalize (randnor);
        float3 ray = reflect(samples[i].xyz, float3 (randnor))  * sampleRadius;

        //if (dot(ray, normal.xyz) < 0)
        //  ray += normal.xyz * sampleRadius;

 //       float4 sample = float4(se + ray, 1.0f);
       
//         float4 sample = float4(se + ray.xyz ,1.0f);
  //        float4 ss = mul(sample,gProjection );

    //     float2 sampleTexCoord = 0.5f * ss.xy/ss.w + float2(0.5f, 0.5f);
//         sampleTexCoord.x *= 1600;
  //       sampleTexCoord.y *= 1200;
   //    float2 sampleTexCoord =  ss.xy/ss.w  +  IN.TexCoord0.xy;
//       float2 sampleTexCoord = sampleRadius * samples[i].xy +  IN.TexCoord0.xy ;
         float2 sampleTexCoord = ray.xy*ray.z +  IN.TexCoord0.xy ;

 //       sampleTexCoord.x += 1.0/1600.0;
  //      sampleTexCoord.y += 1.0/1200.0;
        float sampleDepth = texRECT(DeepSampler, sampleTexCoord).r;
        float3 sampleNorm = texRECT(NormSampler, sampleTexCoord).rgb;
        float dotsn =   max(dot (sampleNorm,normal),0.0);
        //if (sampleDepth.r > DepthColor.r)
        {
         //   finalColor ++;
        }
         // else
        {       
//            float occlusion = distanceScale* max(sampleDepth - (1-DepthColor.r), 0.0f);
            float occlusion = distanceScale* max( (DepthColor.r) - sampleDepth ,0.0);
            finalColor += dotsn * (1.0f / (1.0f + occlusion * occlusion * 0.1));
        }
    }

    finalColor =  finalColor / 16.0f;
    c.rgb = finalColor;
// AO END

    c.a = 1.0;//scnColor.a;
    return c;
}  
///////////////////////////////////////
/// TECHNIQUES ////////////////////////
///////////////////////////////////////

technique Main
    {
pass p0 
    {
	VertexProgram = compile latest colorControlsVS();
		  DepthTestEnable = false;
		DepthMask = false;
		BlendEnable = true;
  		AlphaFunc = { Greater, 0.0f };
  		 AlphaTestEnable = true;
		CullFaceEnable = false;
		DepthFunc = LEqual;
	FragmentProgram = compile latest colorControlsPS(gNormSampler, gDepthSampler, gNormalSampler );
    }
}
technique UseOccMap
    {
pass p0 
    {
	VertexProgram = compile latest colorControlsVS();
		  DepthTestEnable = false;
		DepthMask = false;
		BlendEnable = true;
  		AlphaFunc = { Greater, 0.0f };
  		 AlphaTestEnable = true;
		CullFaceEnable = false;
		DepthFunc = LEqual;
	FragmentProgram = compile latest colorControlsPS2Blur(gNormSampler, gDepthSampler, gOccMapSampler );
    }
}

technique OcclusionMapOnly
    {
pass p0 
    {
	VertexProgram = compile latest colorControlsVS();
		  DepthTestEnable = false;
		DepthMask = false;
		BlendEnable = true;
  		AlphaFunc = { Greater, 0.0f };
  		 AlphaTestEnable = true;
		CullFaceEnable = false;
		DepthFunc = LEqual;
	FragmentProgram = compile latest occmapControlsPS(gNormSampler, gDepthSampler, gNormalSampler );
    }
}

//////////////////////////////////////////////
/////////////////////////////////////// eof //
//////////////////////////////////////////////
